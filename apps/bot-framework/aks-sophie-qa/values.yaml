sai-bot-framework:
  global:
    azureTenantId: 123456789012345678901234567890
    keyvaultName: kv-bots-rd

    identity:
      resourceId: /subscriptions/123456789012345678901234567890/resourcegroups/rg-bots-rd/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id-bots-rd
      clientId: 123456789012345678901234567890
      name: id-bots-rd

  connector:
    publicAccess:
      domain: rd-bots.qa.saiapplications.com
      environment: qa

  proactive:
    enabled: true
    publicAccess:
      domain: rd-bots-proactive.qa.saiapplications.com
      environment: qa
    mongo:
      emailStore:
        mongoUrlSecret: mongo-connstring
    config:
      ApiKey: 123456789012345678901234567890
    bots:
      # ======== BOT TEMPLATE ========
      # AF Assistant
      - name: {{{{{name}}}}}
        type: indexer
        image: acrapplications.azurecr.io/sai-bot-framework/indexer:0.0.31.12345
        msaSecretName: af-qa-app-credentials
        config:
          OPENAI_API_BASE: "https://aoa-sophie-demo.openai.azure.com/"
          OPENAI_API_VERSION: "2023-09-01-preview"
          OPENAI_ENV: azure
          MONGO_DB: {{{{{name}}}}}
          INDEXER_HASH: {{{{{indexerHash}}}}}
          INDEXER_URL: https://llmindexer-api.qa.saiapplications.com/customquery
          AGENT_NAME: {{{{{name}}}}}
          OPENAI_MODEL: gpt-35-turbo-16k
          PROMPT_COLLECTION: prompts
          SOURCE_ENABLE: "False"
        secrets:
          - envVar: MONGO_URL
            keyVaultSecretName: mongo-connstring
          - envVar: OPENAI_API_KEY
            keyVaultSecretName: openai-demo-azure-key
          - envVar: INDEXER_API_KEY
            keyVaultSecretName: {{{{{indexerApiKey}}}}}
      # ============================ testing
        # ======== BOT TEMPLATE ========
        # AF Assistant
        - name: string
            type: indexer
            image: acrapplications.azurecr.io/sai-bot-framework/indexer:0.0.31.12345
            msaSecretName: af-qa-app-credentials
            config:
            OPENAI_API_BASE: "https://aoa-sophie-demo.openai.azure.com/"
            OPENAI_API_VERSION: "2023-09-01-preview"
            OPENAI_ENV: azure
            MONGO_DB: string
            INDEXER_HASH: string
            INDEXER_URL: "https://llmindexer-api.qa.saiapplications.com/customquery"
            AGENT_NAME: string
            OPENAI_MODEL: gpt-35-turbo-16k
            PROMPT_COLLECTION: prompts
            SOURCE_ENABLE: "False"
            secrets:
            - envVar: MONGO_URL
                keyVaultSecretName: mongo-connstring
            - envVar: OPENAI_API_KEY
                keyVaultSecretName: openai-demo-azure-key
            - envVar: INDEXER_API_KEY
                keyVaultSecretName: string
        # ============================ 