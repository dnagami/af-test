sai-bot-framework:
  global:
    azureTenantId: 123456789012345678901234567890
    keyvaultName: kv-bots-rd

    identity:
      resourceId: /subscriptions/123456789012345678901234567890/resourcegroups/rg-bots-rd/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id-bots-rd
      clientId: 123456789012345678901234567890
      name: id-bots-rd

  connector:
    publicAccess:
      domain: rd-bots.qa.saiapplications.com
      environment: qa

  proactive:
    enabled: true
    publicAccess:
      domain: rd-bots-proactive.qa.saiapplications.com
      environment: qa
    mongo:
      emailStore:
        mongoUrlSecret: mongo-connstring
    config:
      ApiKey: 123456789012345678901234567890
    bots:
# ======== BOT TEMPLATE ========
      # AF Assistant
      - name: string
        type: indexer
        image: acrapplications.azurecr.io/sai-bot-framework/indexer:0.0.31.12345
        msaSecretName: af-qa-app-credentials
        config:
          OPENAI_API_BASE: "https://aoa-sophie-demo.openai.azure.com/"
          OPENAI_API_VERSION: "2023-09-01-preview"
          OPENAI_ENV: azure
          MONGO_DB: string
          INDEXER_HASH: string
          INDEXER_URL: "https://llmindexer-api.qa.saiapplications.com/customquery"
          AGENT_NAME: string
          OPENAI_MODEL: gpt-35-turbo-16k
          PROMPT_COLLECTION: prompts
          SOURCE_ENABLE: "False"
        secrets:
          - envVar: MONGO_URL
            keyVaultSecretName: mongo-connstring
          - envVar: OPENAI_API_KEY
            keyVaultSecretName: openai-demo-azure-key
          - envVar: INDEXER_API_KEY
            keyVaultSecretName: string
      # ============================

# ======== Assistant 1 BOT TEMPLATE ========
      # Assistant 1
      - name: Assistant 1
        type: indexer
        image: acrapplications.azurecr.io/sai-bot-framework/indexer:0.0.31.12345
        msaSecretName: af-qa-app-credentials
        config:
          OPENAI_API_BASE: "https://aoa-sophie-demo.openai.azure.com/"
          OPENAI_API_VERSION: "2023-09-01-preview"
          OPENAI_ENV: azure
          MONGO_DB: Assistant 1
          INDEXER_HASH: Assistant 1
          INDEXER_URL: "https://llmindexer-api.qa.saiapplications.com/customquery"
          AGENT_NAME: Assistant 1
          OPENAI_MODEL: gpt-35-turbo-16k
          PROMPT_COLLECTION: prompts
          SOURCE_ENABLE: "False"
        secrets:
          - envVar: MONGO_URL
            keyVaultSecretName: mongo-connstring
          - envVar: OPENAI_API_KEY
            keyVaultSecretName: openai-demo-azure-key
          - envVar: INDEXER_API_KEY
            keyVaultSecretName: Assistant 1
# ======== Assistant 1 BOT TEMPLATE END ========

# ======== Assistant 2 BOT TEMPLATE ========
      # Assistant 2
      - name: Assistant 2
        type: indexer
        image: acrapplications.azurecr.io/sai-bot-framework/indexer:0.0.31.12345
        msaSecretName: af-qa-app-credentials
        config:
          OPENAI_API_BASE: "https://aoa-sophie-demo.openai.azure.com/"
          OPENAI_API_VERSION: "2023-09-01-preview"
          OPENAI_ENV: azure
          MONGO_DB: Assistant 2
          INDEXER_HASH: Assistant 2
          INDEXER_URL: "https://llmindexer-api.qa.saiapplications.com/customquery"
          AGENT_NAME: Assistant 2
          OPENAI_MODEL: gpt-35-turbo-16k
          PROMPT_COLLECTION: prompts
          SOURCE_ENABLE: "False"
        secrets:
          - envVar: MONGO_URL
            keyVaultSecretName: mongo-connstring
          - envVar: OPENAI_API_KEY
            keyVaultSecretName: openai-demo-azure-key
          - envVar: INDEXER_API_KEY
            keyVaultSecretName: Assistant 2
# ======== Assistant 2 BOT TEMPLATE END ========

# ======== Assistente 10 BOT TEMPLATE ========
      # Assistente 10
      - name: Assistente 10
        type: indexer
        image: acrapplications.azurecr.io/sai-bot-framework/indexer:0.0.31.12345
        msaSecretName: af-qa-app-credentials
        config:
          OPENAI_API_BASE: "https://aoa-sophie-demo.openai.azure.com/"
          OPENAI_API_VERSION: "2023-09-01-preview"
          OPENAI_ENV: azure
          MONGO_DB: Assistente 10
          INDEXER_HASH: Assistente 11
          INDEXER_URL: "https://llmindexer-api.qa.saiapplications.com/customquery"
          AGENT_NAME: Assistente 10
          OPENAI_MODEL: gpt-35-turbo-16k
          PROMPT_COLLECTION: prompts
          SOURCE_ENABLE: "False"
        secrets:
          - envVar: MONGO_URL
            keyVaultSecretName: mongo-connstring
          - envVar: OPENAI_API_KEY
            keyVaultSecretName: openai-demo-azure-key
          - envVar: INDEXER_API_KEY
            keyVaultSecretName: Assistente 10
# ======== Assistente 10 BOT TEMPLATE END ========
        
        

# ======== Test BOT TEMPLATE ========
      # Test
      - name: Test
        type: Indexer
        image: indexer
        msaSecretName: msa-secret
        config:
          Config1: ValueFromConfig1
        secrets:
          - envVar: EnvVarName
            keyVaultSecretName: Key Vault Secret Name
# ======== Test BOT TEMPLATE END ========
        
        

# ======== Test BOT TEMPLATE ========
      # Test
      - name: Test
        type: Indexer
        image: indexer
        msaSecretName: msa-secret
        config:
          System.Collections.Generic.Dictionary`2[System.String,System.String]
        secrets:
          System.Collections.Generic.Dictionary`2[System.String,System.String]
# ======== Test BOT TEMPLATE END ========
        

# ======== Test BOT TEMPLATE ========
      # Test
      - name: Test
        type: Indexer
        image: indexer
        msaSecretName: msa-secret
        config:
          System.Collections.Generic.Dictionary`2[System.String,System.String]
        secrets:
          System.Collections.Generic.Dictionary`2[System.String,System.String]
# ======== Test BOT TEMPLATE END ========
        

# ======== Test BOT TEMPLATE ========
      # Test
      - name: Test
        type: Indexer
        image: indexer
        msaSecretName: msa-secret
        config:
          System.Collections.Generic.Dictionary`2[System.String,System.String]
        secrets:
          System.Collections.Generic.Dictionary`2[System.String,System.String]
# ======== Test BOT TEMPLATE END ========
        

# ======== Test BOT TEMPLATE ========
      # Test
      - name: Test
        type: Indexer
        image: indexer
        msaSecretName: msa-secret
        config:
          System.Collections.Generic.Dictionary`2[System.String,System.String]
        secrets:
          System.Collections.Generic.Dictionary`2[System.String,System.String]
# ======== Test BOT TEMPLATE END ========
        

# ======== Test BOT TEMPLATE ========
      # Test
      - name: Test
        type: Indexer
        image: indexer
        msaSecretName: msa-secret
        config:
          System.Collections.Generic.Dictionary`2[System.String,System.String]
        secrets:
          System.Collections.Generic.Dictionary`2[System.String,System.String]
# ======== Test BOT TEMPLATE END ========
        

# ======== Test BOT TEMPLATE ========
      # Test
      - name: Test
        type: Indexer
        image: indexer
        msaSecretName: msa-secret
        config:
          Config1: ValueFromConfig1
        secrets:
          - envVar: EnvVarName
            keyVaultSecretName: Key Vault Secret Name
# ======== Test BOT TEMPLATE END ========
        

# ======== Ind BOT TEMPLATE ========
      # Ind
      - name: Ind
        type: Indexer
        image: Ind
        msaSecretName: msa-secret
        config:
          IndexerHash: Ind
IndexerPrompt: Ind
UserTips: Ind
        secrets:
          - envVar: IndexerApiKey
            keyVaultSecretName: Ind
- envVar: MongoDbConnectionString
            keyVaultSecretName: Ind
# ======== Ind BOT TEMPLATE END ========
        


        
        
# ======== Bot 4 BOT TEMPLATE ========
      # Bot 4
      - name: Bot 4
        type: Indexer
        image: acrapplications.azurecr.io/sai-bot-framework/indexer:0.0.26.dd56af3
        msaSecretName: msa-secret
        config:
          IndexerPrompt: Testing a new prompt with update and now I want to debug.
IndexerHash: mc8921j32c18j21921jm3
        secrets:
          - envVar: MongoDbConnectionString
            keyVaultSecretName: mongodb://localhost:27017/
- envVar: 
            keyVaultSecretName:
# ======== Bot 4 BOT TEMPLATE END ========
        

# ======== Bot 4 BOT TEMPLATE ========
      # Bot 4
      - name: Bot 4
        type: Indexer
        image: acrapplications.azurecr.io/sai-bot-framework/indexer:0.0.26.dd56af3
        msaSecretName: msa-secret
        config:
          IndexerPrompt: Bot 4 prompt
IndexerHash: mj89cje289acsa8dnoa8d
        secrets:
          - envVar: MongoDbConnectionString
            keyVaultSecretName: mongodb://localhost:27017/
- envVar: 
            keyVaultSecretName:
# ======== Bot 4 BOT TEMPLATE END ========
        